#!/bin/bash
set -euo pipefail

# This script runs the coreos-installer found in the compose itself inside a
# chroot inside a supermin VM. The first argument is the path to the metal
# image. It will be available as /dev/disk/by-id/virtio-coreos. The second
# argument is an optional path to an output file. It will be available as
# /var/tmp/coreos-installer-output. All following arguments are passed as is to
# coreos-installer.

if [ ! -f /etc/cosa-supermin ]; then
    dn=$(dirname "$0")
    # shellcheck source=src/cmdlib.sh
    . "${dn}"/cmdlib.sh

    img_src=$1; shift
    output_path=$1; shift

    workdir=$(pwd)
    TMPDIR=$(readlink -f tmp/tmp-osmet-pack)
    rm -rf "${TMPDIR}"
    mkdir -p "${TMPDIR}"

    if [[ $img_src == *.gz || $img_src == *.xz ]]; then
        img="$(basename "$img_src")"
        fatal "Cannot pack osmet from $img; not an uncompressed image"
    fi

    set -- "${TMPDIR}/osmet.bin" "${checksum}" "${speed}"
    if [ -n "${coreinst:-}" ]; then
        cp "${coreinst}" "${TMPDIR}/nestos-installer"
        set -- "$@" "${TMPDIR}/nestos-installer"
    fi

    device_opts=
    if [[ "${img_src}" == *metal4k* ]]; then
        device_opts=",physical_block_size=4096,logical_block_size=4096"
    fi

    virtioserial_args=()
    if [ -n "${output_path}" ]; then
        virtioserial_args+=(-chardev "file,id=coreosout,path=${output_path}" \
                            -device "virtserialport,chardev=coreosout,name=coreosout")
    fi

    runvm -drive "if=none,id=coreos,format=raw,readonly=on,file=${img_src}" \
        -device "virtio-blk,serial=coreos,drive=coreos${device_opts}" \
        "${virtioserial_args[@]}" -- \
        /usr/lib/coreos-assembler/runvm-coreos-installer "$@"

    mv "${TMPDIR}/osmet.bin" "${osmet_dest}"
    rm -rf "${TMPDIR}"

    exit 0
fi

# This runs inside supermin

osmet_dest=$1; shift
checksum=$1; shift
speed=$1; shift
coreinst=${1:-}

set -x

mkdir -p /sysroot
rootfs=/dev/disk/by-id/virtio-osmet-part4
mount -o ro "${rootfs}" /sysroot
osname=$(ls /sysroot/ostree/deploy)
deploydir=$(find "/sysroot/ostree/deploy/$osname/deploy" -mindepth 1 -maxdepth 1 -type d)
# shellcheck disable=SC1090,SC1091
description=$(. "${deploydir}/etc/os-release" && echo "${PRETTY_NAME}")

if [ -z "${coreinst}" ]; then
    # if we weren't given a custom coreos-installer, then we want to use the one
    # from the target system itself; chroot into it to avoid linking issues
    for mnt in dev proc sys run var tmp; do
        mount --rbind /$mnt "${deploydir}/$mnt"
    done
    coreinst="chroot ${deploydir} nestos-installer"
fi

case "$speed" in
    fast)      fast=--fast ;;
    normal)    fast=       ;;
    *)         exit 1      ;;
esac

# We don't want double quotes (for both `coreinst` and `fast`, which may be '')
# shellcheck disable=SC2086
RUST_BACKTRACE=full ${coreinst} pack osmet /dev/disk/by-id/virtio-osmet \
    --description "${description}" \
    --checksum "${checksum}" \
    --output /tmp/osmet.bin $fast

mv /tmp/osmet.bin "${osmet_dest}"

# and now transfer out the output file if provided (see header)
if [ -f /var/tmp/coreos-installer-output ]; then
    cp /var/tmp/coreos-installer-output /dev/virtio-ports/coreosout
fi
